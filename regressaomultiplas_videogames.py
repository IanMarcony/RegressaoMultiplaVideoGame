# -*- coding: utf-8 -*-
"""RegressaoMultiplas-VideoGames.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mqgrG1CsMJc0oyi-93K8qRY5_L4HDHtS

#Regressão Múltipla usando uma base Video games
"""

#Importar dados essenciais
import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive/')

dataset = pd.read_csv('/content/drive/My Drive/CursoIA/MulticlassRegressorVideoGames/games.csv')
dataset

#Importando libs do keras para criação da rede neural de regressão
from keras.layers  import Dense, Dropout, Activation, Input
from keras. models import Model

"""#Pré-processamento no dataset"""

#Apagando dados não necessários para o dataset
dataset = dataset.drop('Other_Sales', axis = 1)
dataset = dataset.drop('Global_Sales', axis = 1)
dataset = dataset.drop('Developer', axis = 1)

#Apagando dados NAN
dataset = dataset.dropna(axis=0)
print(f'Count lines: {len(dataset)}')

#Apagando dados para evitar erros de correlação
dataset = dataset.loc[dataset['NA_Sales'] > 1 ]
dataset = dataset.loc[dataset['EU_Sales'] > 1 ]
nome_jogos = dataset.Name
dataset = dataset.drop('Name', axis = 1)

previsores = dataset.iloc[:,[0,1,2,3,7,8,9,10,1]].values
venda_na = dataset.iloc[:,4].values
venda_eu = dataset.iloc[:,5].values
venda_jp = dataset.iloc[:,6].values

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
labelEncoder = LabelEncoder()
previsores[:,0] = labelEncoder.fit_transform(previsores[:,0])
previsores[:,2] = labelEncoder.fit_transform(previsores[:,2])
previsores[:,3] = labelEncoder.fit_transform(previsores[:,3])
previsores[:,8] = labelEncoder.fit_transform(previsores[:,8])


columnTransformer = ColumnTransformer([('encoder', OneHotEncoder(), [0,2,3,8])],     remainder='passthrough')
previsores=columnTransformer.fit_transform(previsores).toarray()

"""#Rede Neural"""

camada_entrada = Input(shape=(78,))
camada_oculta1 = Dense(units = 41, activation = 'sigmoid')(camada_entrada)
camada_oculta2 = Dense(units = 41, activation = 'sigmoid')(camada_oculta1)
camada_saida1 = Dense(units = 1, activation = 'linear')(camada_oculta2)
camada_saida2 = Dense(units = 1, activation = 'linear')(camada_oculta2)
camada_saida3 = Dense(units = 1, activation = 'linear')(camada_oculta2)


regressor = Model(inputs = camada_entrada,
                  outputs = [camada_saida1, camada_saida2, camada_saida3])

regressor.compile(optimizer = 'adam',
                  loss = 'mse')

#Treinamento
regressor.fit(previsores,
              [venda_na, venda_eu, venda_jp],
              epochs = 5000,
              batch_size = 100)

"""#Previsão"""

previsa_na , previsao_eu, previsao_jp = regressor.predict(previsores)
print(previsa_na.mean() , previsao_eu.mean(), previsao_jp.mean() )
print(previsa_na.mean() , previsao_eu.mean(), previsao_jp.mean() )